#ifndef NETLIB_NETLIB_TCP_SERVER_H_
#define NETLIB_NETLIB_TCP_SERVER_H_

#include <map>
#include <string>
#include <memory>

#include <netlib/non_copyable.h>
#include <netlib/callback.h>

namespace netlib
{

class EventLoop;
class Acceptor;
class SocketAddress;

// TcpServer class's task: Manage the tcp connections get by accept(2).
// This class is used directly by user and its lifetime is controlled by user.
// User only needs set callback and then call Start().
class TcpServer: public NonCopyable
{
public:
	TcpServer(EventLoop *loop, const SocketAddress &listen_address);
	~TcpServer(); // Force outline destructor, for unique_ptr members.

	// Set connection callback. Not thread safe.
	void set_connection_callback(const ConnectionCallback &callback)
	{
		connection_callback_ = callback;
	}
	// Set message callback. Not thread safe.
	void set_message_callback(const MessageCallback &callback)
	{
		message_callback_ = callback;
	}

	// Start the server if it's not listening. It's harmless to call it multiple times.
	// Thread safe.
	void Start();

private:
	// TcpConnectionPtr is `shared_ptr<TcpConnection>`
	using ConnectionMap = std::map<std::string, TcpConnectionPtr>;

	// Not thread safe, but in loop.
	// Create the TcpConnection object, add it to the connection map,
	// set callbacks, and call `connection_object->ConnectionEstablished()`, which
	// calls the user's ConnectionCallback.
	// NewConnectionCallback = std::function<void(int, const SocketAddress&)>;
	// which is used in only Acceptor class, so we don't put it in the callback.h.
	void NewConnectionCallback(int socket_fd, const SocketAddress &peer_address);

	EventLoop *loop_; // The acceptor loop.
	// listen_address.ToHostPort(), i.e., "IP_address:Port" representation of listen address.
	const std::string name_;
	// Use Acceptor to get the new connection's socket file descriptor.
	// When new connection arrives, acceptor_ calls NewConnectionCallback().
	std::unique_ptr<Acceptor> acceptor_; // Avoid revealing Acceptor
	// TcpServer stores the user's *callback and pass them to the TcpConnection when
	// creates the TcpConnection object.
	// std::function<void(const TcpConnection&)>;
	ConnectionCallback connection_callback_;
	// std::function<void(const TcpConnectionPtr&, const char*, int)>;
	MessageCallback message_callback_;
	bool started_;
	int next_connection_id_; // Always in loop thread.
	// Every TcpConnection has a name that is generated by its owner TcpServer when
	// create it.
	// connection_name = name_ + "next_connection_id_". next_connection_id_ is
	// increase name_ is the key of connection_map_.
	ConnectionMap connection_map_;
};

}

#endif // NETLIB_NETLIB_TCP_SERVER_H_
